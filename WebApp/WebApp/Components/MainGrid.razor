<div class="MainGrid">
    @if (teams != null)
    {
        <div class="grid-container">
            @foreach (var team in teams)
            {
                <div>
                    <a href="teamdetail/@team.Name" class="team-link" @onclick="() => NavigateToDetail(team.Name)">
                        <img src="@team.Url" alt="Team Image" width="75" height="75" />
                        <span>@team.Name</span>
                    </a>
                </div>
            }
        </div>
    }
    else
    {
        <p>@teamsLoadingMessage</p>
    }
</div>

<!--kontrolliert status und je nach dem lädt es eine andere Farbe-->
<div class="status-bar @(status == "Service is up" ? "service-up" : "service-down")">
    <p>@status</p>
</div>

@code {
    private List<Team> teams;
    private string status;
    private string teamsLoadingMessage;

    protected override async Task OnInitializedAsync()
    {
        await LoadTeamsAndStatus();
        await UpdateStatusPeriodically(TimeSpan.FromSeconds(2.5));
    }

    private async Task LoadTeamsAndStatus()
    {
        teamsLoadingMessage = "Teams loading...";
        try
        {
            var response = await HttpClient.GetAsync("http://localhost:8888/teams");
            if (response.IsSuccessStatusCode)
            {
                teams = await response.Content.ReadFromJsonAsync<List<Team>>();
                UpdateStatus("Service is up");
                teamsLoadingMessage = "";
            }
            else
            {
                teamsLoadingMessage = "Teams couldn't be loaded";
                UpdateStatus("Service is down");
            }
        }
        catch (Exception ex)
        {
            teamsLoadingMessage = "Teams couldn't be loaded";
            UpdateStatus("Service is down");
        }
    }

    private void NavigateToDetail(string teamName)
    {
        NavigationManager.NavigateTo($"/teamdetail/{teamName}");
    }

    private async Task UpdateStatusPeriodically(TimeSpan interval)
    {
        while (true)
        {
            try
            {
                using (var client = new HttpClient())
                {
                    var statusResponse = await client.GetAsync("http://localhost:8888/");
                    if (statusResponse.IsSuccessStatusCode)
                    {
                        UpdateStatus("Service is up");
                    }
                    else
                    {
                        UpdateStatus("Service is down");
                    }
                }

                await LoadTeamsAndStatus();
            }
            catch (Exception ex)
            {
                teamsLoadingMessage = "Teams couldn't be loaded";
                UpdateStatus("Service is down");
            }

            StateHasChanged();

            await Task.Delay(interval);
        }
    }

    private void UpdateStatus(string newStatus)
    {
        status = newStatus;
    }
}


<style>
    .grid-container {
    display: grid;
    grid-template-columns: repeat(4, 1fr);
    grid-gap: 12.5px;
    padding: 4px;
    border: solid;
    border-width: 0.25px;
    margin-top: 3%;
    border-radius: 4px;
}

.team-link {
    display: flex;
    flex-direction: column;
    align-items: center;
    text-decoration: none;
    color: inherit;
    padding: 8px;
}

.team-details {
    flex: 1;
}

.status-bar {
    font-size: 15px;
    padding: 12px;
    margin: 10px;
    border-radius: 8px;
    background: -moz-linear-gradient(left, #F2779A, #FF6F5F, #F9826C);
}
</style>